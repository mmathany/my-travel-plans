html {
    box-sizing: border-box;
    height: 100%;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

body {
    display: flex;
    margin: 0;
    height: 100%;
}

.container {
    margin: auto;
    padding: 1em;
    width: 80%;
}

.destination-container {
    display: flex;
    flex-flow: wrap;
    justify-content: center;
}

.destination {
    background: #03a9f4;
    box-shadow: 0 1px 9px 0 rgba(0, 0, 0, 0.4);
    color: white;
    margin: 0.5em;
    min-height: 200px;
    flex: 0 1 200px;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
}

h2 {
    margin: 0;
    transform: rotate(-45deg);
    text-shadow: 0 0 5px #01579b;
}

#florida {
    background-color: #03a9f4;
}

#paris {
    background-color: #d32f2f;
}

QUESTION 2 OF 5
Let's make sure you're all set to continue. Please check off each of the following:

I have created a new directory for my project with the name my-travel-plans
I've turned the project into a Git repo
I've added at least one file to the project
I've commited the file with git commit (for example, Initial commit)

****Hosting on GitHub

There are several options for us to host Git projects. But one of the most popular hosting sites is a service called GitHub which you might have heard of before. Now the problem with GitHub is that the name is so similar to Git that people sometimes conflate Git and GitHub and think they're the same thing when they're actually quite different.

Git is a version control tool
GitHub is a service to host Git projects
If you are already familiar with GitHub and know how to create a repo without initializing a README, you can skip this video and go ahead and make your repo with the same name as your sample project, and remember not to initialize a readme.

If you don't have an account yet, sign up for one on GitHub's join page. There are different types of GitHub accounts you can sign up for but the free tier is all that we need for this course. And a free account is what most people use anyway. Once you create your account, sign in to GitHub and you'll be on the home page:

A Screenshot of Richard's GitHub account right after signing in.
This is what my account shows right after signing in. Your information will be different depending on the number of repositories you have and other users and repositories you follow.

Just like every website, GitHub updates its interface quite often so if what you're seeing doesn't look exactly like the image above don't worry the important features will be the same.

The important thing we need to look at right now is how to create a new Repository. There are actually two ways to do this from the homepage:

from the navbar
the green "new repository" button part way down the page on the right side
GitHub has two locations where you can create a new repository. The plus icon located in the page's header and the "New Repository" button in the middle of the page.
GitHub has two locations where you can create a new repository. The plus icon located in the page's header and the "New Repository" button in the middle of the page.

I use the button in the navigation bar because the navigation bar is available on every single page, which makes it easy to get to the new repo link.

Clicking on the plus icon in GitHub's header displays a dropdown of options. One option is the "New repository" link.
Clicking on the plus icon in GitHub's header displays a dropdown of options. One option is the "New repository" link.

In the dropdown, the New repository link takes you to the repository creation page. We only need to fill out just one field in this form - the repository name field.

GitHub's Create a new repository page. The only required field is the `Repository name` field.
GitHub's Create a new repository page. The only required field is the Repository name field.

Typically you want to use the name of your project as the name of the repository. Creating a repository, modifying it later, or deleting it is relatively easy so don't feel like you have to get the name perfect right here on this page. I'm going to create a repository called "my-travel-plans" that's the same name as the sample project I created.

It's okay to leave the description empty for now (although, you can provide one if you want). Because I'm on the free tier plan, my repository has to be public (which means my repository and all my code will be freely available for anyone to look at). If I want this to be a private repository, then I'd choose "Private" which will cause GitHub to ask for my credit card information and will also upgrade me to a paid plan.

I'm also going to leave the "Initialize this repository with the README" option unchecked because I don't want GitHub to add a README file for me.

⚠️ Don't Initialize with a README ⚠️
Make sure that you leave the "Initialize this repository with the README" unchecked. We'll be providing our own README, so we don't want GitHub to provide one automatically.

Also, if we let GitHub auto-generate a new README file for us, then we won't be provided with the setup commands to run in the terminal. It's still possible to get that information, but it will be hidden away.

So just make sure to leave this field unchecked, and you'll be good to go!

Now just click that big "Create Repository" button to create your remote repository!


Remember that the git remote command is used to create and manage remote repositories. So I'll use the following command to create a connection from my local repository to the remote repository I just created on my GitHub account:

$ git remote add origin https://github.com/richardkalehoff/RichardsFantasticProject.git
⚠️ Remotes & Permissions ⚠️
Warning: It's important that you use the URL for the new repository that you created on your GitHub profile. Do not use the one above because that's for the project I just created on _my_ account. Because this project is on _my_ account you do not have access to send changes to it.

So make sure you use the URL from your project.

The friends Kagure, Jack, Owen, and Finn each have their own my-travel-plans project at:

https://github.com/kagure/my-travel-plans.git
https://github.com/jack/my-travel-plans.git
https://github.com/owen/my-travel-plans.git
https://github.com/finn/my-travel-plans.git

QUESTION 3 OF 5
Whose repository is being cloned in the following command?

$ git clone https://github.com/owen/my-travel-plans.git
Owen's


QUESTION 4 OF 5
Jonathan and Allison are working on a project together. Jonathan creates a project on GitHub at the URL https://github.com/docsrus/brain-mapping.git .

If Allison runs git clone https://github.com/docsrus/brain-mapping.git, will she have permission to make changes to Jonathan's project on GitHub?
No

There are a couple of things to notice about the command you just ran on the command line:

first, this command has the sub command add
the word origin is used - this is setting the shortname that we discussed earlier

Remember that the word origin here isn't special in any way.
If you want to change this to repo-on-GitHub, then (before running the command) just change the word "origin" to "repo-on-GitHub":

$ git remote add repo-on-GitHub https://github.com/richardkalehoff/RichardsFantasticProject.git

third, the full path to the repository is added (i.e. the URL to the remote repository on the web)
Now I'll use git remote -v to verify that I've added the remote repository correctly:

`git remote add` was used to create a shortname of `origin` that points to the project on GitHub. Running `git remote -v` displays both the shortname and the URL
git remote add was used to create a shortname of origin that points to the project on GitHub. Running git remote -v displays both the shortname and the URL.

Fantastic! Everything is looking good. I've added a link to my remote repository with the git remote add command, and then I verified that everything looks correct with git remote -v.

QUESTION 5 OF 5
Let's make sure we're on the same page. Make sure you can answer all of these:

I've created my remote repository on Github
I've used git remote add to create a connection from my local repository to the
remote Repository
I've used git remote -v to verify that the shortname is there with the correct
URL

-----------------

****Recap

A remote repository is a repository that's just like the one you're using but it's just stored at a different location. To manage a remote repository, use the git remote command:

$ git remote
It's possible to have links to multiple different remote repositories.
A shortname is the name that's used to refer to a remote repository's location. Typically the location is a URL, but it could be a file path on the same computer.
git remote add is used to add a connection to a new remote repository.
git remote -v is used to see the details about a connection to a remote.
Further Research
Working with Remotes from the Git book
the git remote command from the Git docs

-----------------------------------------------------------------------------

****PUSH CHANGES TO A REMOTE****

****Reviewing Commits

Let's take a look at the commits that I have in my Repository.

The terminal application displaying the log of the project's commits.
The terminal application displaying the log of the project's commits.

I used the following log command to display these commits

$ git log --oneline --graph --decorate --all
These commits are only in the local repository, though. They haven't been sent up to the remote repository yet. When commits are sent to the remote a remote branch indicator will appear in the log. Since there aren't any remote branch indicators we can tell that there are no commits on the remote repository. But just to be 100% certain let's look at the remote repository on GitHub to see if there any commits.

A Screenshot of a remote repository that doesn't contain any commits
The remote repository doesn't contain any commits, so GitHub displays the repository's setup screen.

Since we haven't sent any commits update to GitHub yet it's still showing us the setup screen to tell us how we can connect our local repository to the remote repository and send some commits. Since this is still the setup screen we can know that there are no commits in the remote repository.

---------------------

****Sending Commits
To send local commits to a remote repository you need to use the git push command. You provide the remote short name and then you supply the name of the branch that contains the commits you want to push:

$ git push <remote-shortname> <branch>
My remote's shortname is origin and the commits that I want to push are on the master branch. So I'll use the following command to send my commits to the remote repository on GitHub:

$ git push origin master
The terminal application showing the `git push` command. It asks for my username, password (which isn't displayed), and then displays information about what it's doing to send the commits.
The terminal application showing the git push command. It asks for my username, password (which isn't displayed), and then displays information about what it's doing to send the commits.

There a couple of things to notice:

Depending on how you have configured GitHub and the remote URL that's being used, you might have to enter your username and password.
this will happen if you use the HTTP version of the remote (rather than the ssh version)
If you have configured GitHub to use the SSH protocol and have supplied it with your SSH key then you don't need to worry about doing this step. Check the Connecting to GitHub with SSH documentation page if you're interested in using SSH with GitHub.
If you have to enter your username and password your username will show up after typing but your password will not. So just keep typing your password and press enter when you're done.
If you encounter any errors with your password don't worry it'll just ask you to type it in again
Git does some compressing of things to make it smaller and then sends those off to the remote
A new branch is created - at the very bottom it says [new branch] and then master -> master

-----------------

Now let's look at GitHub:

A Screenshot of Richard's entire project on GitHub

My entire project is up on GitHub!

Our project is up on GitHub - how awesome and easy was that! One cool feature that GitHub does is that it automatically shows the content of the README file which can be extremely helpful.

GitHub also displays a lot of details about our Repository. Right now it's showing that there are:

three commits
one branch
one contributor

The project's main page on GitHub displays information about the repository.
The project's main page on GitHub displays information about the repository.

Now before we move on, let's just check the local repository to see how it changed after pushing.

Run the following command:

$ git log --oneline --graph --decorate --all
Important: make sure to include the --decorate and --all flags

The terminal application showing the results of running `git log --oneline --graph --decorate --all`. The new `origin/master` tracking branch now exists
The terminal application showing the results of running git log --oneline --graph --decorate --all. The new origin/master tracking branch now exists.

We now have a new marker in the output! This marker is origin/master and is called a tracking branch. A tracking branch's name includes the shortname of the remote repository as well as the name of the branch. So the tracking branch origin/master is telling us that the remote origin has a master branch that points to commit 9b7d28f (and includes all of the commits before 9b7d28f). This is really helpful because this means we can track the information of the remote Repository right here in our local one!

One very important thing to know is that this origin/master tracking branch is not a live representation of where the branch exists on the remote repository. If a change is made to the remote repository not by us but by someone else, the origin/master tracking branch in our local repository will not move. We have to tell it to go check for any updates and then it will move. We'll look at how to do this in the next section.

---------------

****Recap
The git push command is used to send commits from a local repository to a remote repository.

$ git push origin master
The git push command takes:

the shortname of the remote repository you want to send commits to
the name of the branch that has the commits you want to send
